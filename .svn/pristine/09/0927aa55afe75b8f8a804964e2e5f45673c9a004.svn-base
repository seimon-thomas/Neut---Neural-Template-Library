///////////////////////////////////////////////////////////////////////////////////////////////////
//
// IOutputs.h
//
///////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef IOutputs_H
#define IOutputs_H

////////////////////////////////////////////////////////////////////////////////
// INCLUDED HEADERS
////////////////////////////////////////////////////////////////////////////////


#include <boost/shared_ptr.hpp>



namespace Neural 
{
	template<typename T, typename ContainerT> class IOutputs
	{
	public:
		virtual void putNextOutputSet(const ContainerT& setToWrite)=0;
		
		virtual ~IOutputs() {};
		
	protected:
		IOutputs() {};

	};

	typedef IOutputs<double,std::vector<double> > IOutputsDouble;
	typedef boost::shared_ptr< IOutputsDouble > IOutputsDoublePtr;
}

#endif